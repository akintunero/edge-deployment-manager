[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "edge-deployment-manager"
version = "2.0.0"
description = "A lightweight and scalable DevOps tool for edge computing deployments"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Olúmáyòwá Akinkuehinmi", email = "akintunero101@gmail.com"}
]
maintainers = [
    {name = "Olúmáyòwá Akinkuehinmi", email = "akintunero101@gmail.com"}
]
keywords = ["edge-computing", "devops", "docker", "kubernetes", "mqtt", "deployment"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: System :: Systems Administration",
]
requires-python = ">=3.8"
dependencies = [
    "paho-mqtt>=2.1.0",
    "docker>=7.1.0",
    "kubernetes>=33.1.0",
    "pyyaml>=6.0.2",
    "requests>=2.32.4",
    "typing-extensions>=4.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.23.0",
    "flake8>=7.3.0",
    "black>=25.0.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "tox>=4.11.0",
    "coverage>=7.4.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "types-requests>=2.31.0",
    "types-PyYAML>=6.0.0",
]

docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/akintunero/edge-deployment-manager"
Documentation = "https://github.com/akintunero/edge-deployment-manager#readme"
Repository = "https://github.com/akintunero/edge-deployment-manager.git"
"Bug Tracker" = "https://github.com/akintunero/edge-deployment-manager/issues"
"Changelog" = "https://github.com/akintunero/edge-deployment-manager/blob/main/CHANGELOG.md"

[project.scripts]
edge-deployment-manager = "src.manager:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "docker.*",
    "kubernetes.*",
    "paho.mqtt.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.safety]
output = "json" 